package app4;

import java.awt.Color;
import static java.awt.Color.black;
import static java.awt.Color.gray;
import java.awt.Font;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author MarcoVilera
 */
public class Eval4 extends javax.swing.JFrame {

    int xMouse, yMouse;//Ejes X Y
    Connection con = ConnectionMySQL.connect();//Conexión
    byte[] photo = null;//Vector para subir imagen
    byte[] photoData = null;
    Blob blob = null;

    public Eval4() throws SQLException {

        setLocationRelativeTo(null);
        initComponents();
        background.requestFocusInWindow();
        codeText.setVisible(false);
        birthDateChooser.getDateEditor().setEnabled(false);
        render();
        loadTable();
        firstNameLabelError.setVisible(false);
        lastNameLabelError.setVisible(false);
        idLabelError.setVisible(false);
        phoneLabelError.setVisible(false);
        labelDateError.setVisible(false);
        emailCheckerLabel.setVisible(false);
        labelStatus.setVisible(false);
        deleteBtn.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        background = new javax.swing.JPanel();
        panelForm = new javax.swing.JPanel();
        imgLabel = new javax.swing.JLabel();
        codeText = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameEntry = new javax.swing.JTextField();
        firstNameSeparator = new javax.swing.JSeparator();
        lastNameLabel = new javax.swing.JLabel();
        lastNameEntry = new javax.swing.JTextField();
        lastNameSeparator = new javax.swing.JSeparator();
        idLabel = new javax.swing.JLabel();
        idEntry = new javax.swing.JTextField();
        idSeparator = new javax.swing.JSeparator();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneEntry = new javax.swing.JTextField();
        phoneSeparator = new javax.swing.JSeparator();
        birthDateLabel = new javax.swing.JLabel();
        birthDateChooser = new com.toedter.calendar.JDateChooser();
        emailLabel = new javax.swing.JLabel();
        emailEntry = new javax.swing.JTextField();
        emailSeparator = new javax.swing.JSeparator();
        lbImg = new javax.swing.JLabel();
        selectFileBtn = new javax.swing.JButton();
        createModifybtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        firstNameLabelError = new javax.swing.JLabel();
        lastNameLabelError = new javax.swing.JLabel();
        idLabelError = new javax.swing.JLabel();
        phoneLabelError = new javax.swing.JLabel();
        emailCheckerLabel = new javax.swing.JLabel();
        labelDateError = new javax.swing.JLabel();
        scrollPaneReg = new javax.swing.JScrollPane();
        tableReg = new javax.swing.JTable();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(0, 0));
        setUndecorated(true);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setForeground(new java.awt.Color(255, 255, 255));
        background.setPreferredSize(new java.awt.Dimension(1000, 640));
        background.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundMouseClicked(evt);
            }
        });
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelForm.setBackground(new java.awt.Color(255, 255, 255));
        panelForm.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Entrada de Datos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18), new java.awt.Color(0, 0, 0))); // NOI18N
        panelForm.setForeground(new java.awt.Color(51, 51, 51));
        panelForm.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imgLabel.setBackground(new java.awt.Color(255, 255, 255));
        imgLabel.setForeground(new java.awt.Color(255, 255, 255));
        panelForm.add(imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 120, 130));

        codeText.setFocusable(false);
        codeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeTextActionPerformed(evt);
            }
        });
        panelForm.add(codeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        firstNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        firstNameLabel.setText("Nombre");
        panelForm.add(firstNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, 30));

        firstNameEntry.setForeground(java.awt.Color.gray);
        firstNameEntry.setText("Introduce tu nombre");
        firstNameEntry.setBorder(null);
        firstNameEntry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstNameEntryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameEntryFocusLost(evt);
            }
        });
        firstNameEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameEntryActionPerformed(evt);
            }
        });
        firstNameEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                firstNameEntryKeyTyped(evt);
            }
        });
        panelForm.add(firstNameEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 170, -1));

        firstNameSeparator.setPreferredSize(new java.awt.Dimension(64, 10));
        panelForm.add(firstNameSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 170, 10));

        lastNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lastNameLabel.setText("Apellido");
        panelForm.add(lastNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, 30));

        lastNameEntry.setForeground(java.awt.Color.gray);
        lastNameEntry.setText("Introduce tu apellido");
        lastNameEntry.setBorder(null);
        lastNameEntry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastNameEntryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameEntryFocusLost(evt);
            }
        });
        lastNameEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lastNameEntryKeyTyped(evt);
            }
        });
        panelForm.add(lastNameEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 170, -1));
        panelForm.add(lastNameSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 170, 10));

        idLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        idLabel.setText("Cédula");
        panelForm.add(idLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, 30));

        idEntry.setForeground(java.awt.Color.gray);
        idEntry.setText("Introduce tu cédula");
        idEntry.setBorder(null);
        idEntry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                idEntryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                idEntryFocusLost(evt);
            }
        });
        idEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idEntryKeyTyped(evt);
            }
        });
        panelForm.add(idEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 170, -1));
        panelForm.add(idSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, 170, 10));

        phoneNumberLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        phoneNumberLabel.setText("Número de teléfono");
        panelForm.add(phoneNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, 30));

        phoneEntry.setForeground(java.awt.Color.gray);
        phoneEntry.setText("Introduce tu número telefónico");
        phoneEntry.setBorder(null);
        phoneEntry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phoneEntryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                phoneEntryFocusLost(evt);
            }
        });
        phoneEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneEntryActionPerformed(evt);
            }
        });
        phoneEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneEntryKeyTyped(evt);
            }
        });
        panelForm.add(phoneEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 170, -1));
        panelForm.add(phoneSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 350, 170, 10));

        birthDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        birthDateLabel.setText("Fecha de nacimiento");
        panelForm.add(birthDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, 30));

        birthDateChooser.setMaxSelectableDate(new java.util.Date(1388467913000L));
        birthDateChooser.setMinSelectableDate(new java.util.Date(-2208969027000L));
        birthDateChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                birthDateChooserMouseClicked(evt);
            }
        });
        panelForm.add(birthDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 370, -1, -1));

        emailLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        emailLabel.setText("Email");
        panelForm.add(emailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, -1, 30));

        emailEntry.setForeground(java.awt.Color.gray);
        emailEntry.setText("Introduce tu correo electronico");
        emailEntry.setBorder(null);
        emailEntry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailEntryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailEntryFocusLost(evt);
            }
        });
        emailEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailEntryActionPerformed(evt);
            }
        });
        emailEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailEntryKeyTyped(evt);
            }
        });
        panelForm.add(emailEntry, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 410, 170, -1));
        panelForm.add(emailSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 430, 170, 10));

        lbImg.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lbImg.setText("Foto");
        panelForm.add(lbImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, -1, -1));

        selectFileBtn.setText("Seleccionar Archivo");
        selectFileBtn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectFileBtnFocusGained(evt);
            }
        });
        selectFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileBtnActionPerformed(evt);
            }
        });
        panelForm.add(selectFileBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 450, -1, -1));

        createModifybtn.setText("Crear");
        createModifybtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createModifybtn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                createModifybtnFocusGained(evt);
            }
        });
        createModifybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createModifybtnActionPerformed(evt);
            }
        });
        panelForm.add(createModifybtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, 81, 22));

        deleteBtn.setText("Eliminar");
        deleteBtn.setPreferredSize(new java.awt.Dimension(80, 22));
        deleteBtn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteBtnFocusGained(evt);
            }
        });
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        panelForm.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 490, -1, -1));

        clearBtn.setText("Limpiar");
        clearBtn.setPreferredSize(new java.awt.Dimension(80, 22));
        clearBtn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearBtnFocusGained(evt);
            }
        });
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        panelForm.add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, -1, -1));

        labelStatus.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        labelStatus.setForeground(new java.awt.Color(5, 157, 6));
        labelStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStatus.setText("Registro creado correctamente");
        panelForm.add(labelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 580, -1));

        firstNameLabelError.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        firstNameLabelError.setForeground(new java.awt.Color(204, 51, 0));
        firstNameLabelError.setText("Solo se pueden ingresar valores alfabéticos");
        panelForm.add(firstNameLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, 230, -1));

        lastNameLabelError.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lastNameLabelError.setForeground(new java.awt.Color(204, 51, 0));
        lastNameLabelError.setText("Solo se pueden ingresar valores alfabéticos");
        panelForm.add(lastNameLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, 230, -1));

        idLabelError.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        idLabelError.setForeground(new java.awt.Color(204, 51, 0));
        idLabelError.setText("Solo se pueden ingresar valores númericos");
        panelForm.add(idLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, -1, -1));

        phoneLabelError.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        phoneLabelError.setForeground(new java.awt.Color(204, 51, 0));
        phoneLabelError.setText("Solo se pueden ingresar valores númericos");
        panelForm.add(phoneLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 330, 190, -1));

        emailCheckerLabel.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        emailCheckerLabel.setForeground(new java.awt.Color(204, 51, 0));
        emailCheckerLabel.setText("Dirección de correo no valida");
        panelForm.add(emailCheckerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 410, 230, -1));

        labelDateError.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        labelDateError.setForeground(new java.awt.Color(204, 51, 0));
        labelDateError.setText("Fecha no valida");
        panelForm.add(labelDateError, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 380, 110, -1));

        background.add(panelForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 580, 530));

        tableReg.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tableReg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Nombre", "Apellido", "Cédula"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReg.getTableHeader().setReorderingAllowed(false);
        tableReg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableRegFocusGained(evt);
            }
        });
        tableReg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRegMouseClicked(evt);
            }
        });
        scrollPaneReg.setViewportView(tableReg);
        if (tableReg.getColumnModel().getColumnCount() > 0) {
            tableReg.getColumnModel().getColumn(0).setMinWidth(30);
            tableReg.getColumnModel().getColumn(0).setPreferredWidth(30);
            tableReg.getColumnModel().getColumn(0).setMaxWidth(30);
            tableReg.getColumnModel().getColumn(1).setResizable(false);
            tableReg.getColumnModel().getColumn(1).setPreferredWidth(15);
            tableReg.getColumnModel().getColumn(2).setResizable(false);
            tableReg.getColumnModel().getColumn(2).setPreferredWidth(10);
            tableReg.getColumnModel().getColumn(3).setResizable(false);
            tableReg.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        background.add(scrollPaneReg, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 340, 520));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundMouseClicked

        labelStatus.setVisible(false);
        if (firstNameEntry.hasFocus()) {
            background.requestFocusInWindow();
        } else if (lastNameEntry.hasFocus()) {
            background.requestFocusInWindow();
        } else if (idEntry.hasFocus()) {
            background.requestFocusInWindow();
        } else if (phoneEntry.hasFocus()) {
            background.requestFocusInWindow();
        } else if (emailEntry.hasFocus()) {
            background.requestFocusInWindow();
        } else if (tableReg.hasFocus()) {
            background.requestFocusInWindow();
        }

        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");
            idEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);
        }
        tableReg.clearSelection();
    }//GEN-LAST:event_backgroundMouseClicked

    //@SuppressWarnings("empty-statement")
    private void selectFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileBtnActionPerformed
        String ruta = "";
        JFileChooser file = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("PNG", "png");
        file.setFileFilter(filtro);

        int resp = file.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            ruta = file.getSelectedFile().getPath();
            Image img = new ImageIcon(ruta).getImage();
            ImageIcon imgIcon = new ImageIcon(img.getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), img.SCALE_SMOOTH));
            imgLabel.setIcon(imgIcon);

        }
        try {
            File img = new File(ruta);
            String extension = getFileExtension(img).toLowerCase();

            //Validar si el archivo es válido
            if (extension.equals("png")) {
                FileInputStream fis = new FileInputStream(img);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for (int readNum; (readNum = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, readNum);
                }
                photo = bos.toByteArray();
            } else {
                photo = null;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_selectFileBtnActionPerformed

    private void createModifybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createModifybtnActionPerformed
        /*System.out.println(blob);
        System.out.println(photo);*/
        try {
            // Validar campo de nombre
            if (firstNameEntry.getText().trim().isEmpty() || firstNameEntry.getText().equals("Introduce tu nombre")) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa un nombre válido.");
                return;
            }
            // Validar campo de Apellido
            if (lastNameEntry.getText().trim().isEmpty() || lastNameEntry.getText().equals("Introduce tu apellido")) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa un apellido válido.");
                return;
            }
            // Validar campo de Cédula
            if (idEntry.getText().trim().isEmpty() || idEntry.getText().equals("Introduce tu cédula")) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa una cédula válida");
                return;
            }
            if (idEntry.getText().length() < 6) {
                JOptionPane.showMessageDialog(null, "La cédula debe tener al menos 6 dígitos.");
                return;
            }
            // Validar campo de Télefono
            if (phoneEntry.getText().trim().isEmpty() || phoneEntry.getText().equals("Introduce tu número telefónico")) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa un número de telefono válido");
                return;
            }
            if (phoneEntry.getText().length() != 12) {
                JOptionPane.showMessageDialog(null, "El número de teléfono debe tener exactamente 11 dígitos.");
                return;
            }
            // Validar DateChooser
            if (birthDateChooser.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Por favor introduce una fecha de nacimiento valida.");
                return;
            }
            // Validar campo de Email
            String emailRegex = "^[a-zA-Z0-9.%+-]\\@[a-zA-Z0-9-]\\.[a-zA-Z0-9._-]$";
            if (!Pattern.matches(emailRegex, emailEntry.getText())) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa un correo electrónico válido.");
                return;
            }
            // Validar si se ha subido una foto
            if (blob == null && photo == null) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa una foto válida");
                return;
            }/*else if (blob != null && photo == null) {
                JOptionPane.showMessageDialog(null, "Por favor ingresas una foto válida");
                return;
            }*/

            //CREAR REGISTRO
            if (codeText.getText().isEmpty()) {
                String name = firstNameEntry.getText();
                name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();

                String lastName = lastNameEntry.getText();
                lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1).toLowerCase();

                int identification = Integer.parseInt(idEntry.getText());
                String phoneNumber = phoneEntry.getText();

                Date birthDate = birthDateChooser.getDate();
                String email = emailEntry.getText();

                PreparedStatement ps = con.prepareStatement("INSERT INTO registros (name,last_name,identification,phone_number,birth_day,email,photo) VALUES (?,?,?,?,?,?,?)");
                ps.setString(1, name);
                ps.setString(2, lastName);
                ps.setInt(3, identification);
                ps.setString(4, phoneNumber);
                ps.setDate(5, new java.sql.Date(birthDate.getTime()));
                ps.setString(6, email);
                ps.setBytes(7, photo);
                ps.executeUpdate();

                loadTable();
                labelStatus.setText("Registro creado correctamente");
                labelStatus.setVisible(true);
                clear();

                //MODIFICAR REGISTROS
            } else {
                int id = Integer.parseInt(codeText.getText());
                String name = firstNameEntry.getText();
                name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();

                String lastName = lastNameEntry.getText();
                lastName = lastName.substring(0, 1).toUpperCase() + lastName.substring(1).toLowerCase();

                int identification = Integer.parseInt(idEntry.getText());
                String phoneNumber = phoneEntry.getText();

                Date birthDate = birthDateChooser.getDate();
                String email = emailEntry.getText();

                if (photo != null) {
                    photoData = photo; // Si se ha subido una foto, establecer el valor del parámetro 7 como la variable photo
                } else {
                    PreparedStatement stmt = con.prepareStatement("SELECT photo FROM registros WHERE id=?");
                    stmt.setInt(1, id);
                    ResultSet rs = stmt.executeQuery();
                    if (rs.next()) {
                        photoData = rs.getBytes("photo"); // Si no se ha subido una foto, obtener los datos de lafoto actual en la base de datos y establecer el valor del parámetro 7 como los datos de la foto actual
                    }
                }
                PreparedStatement ps = con.prepareStatement("UPDATE  registros SET name=?,last_name=?,identification=?,phone_number=?,birth_day=?,email=?,photo=? WHERE id=?");
                ps.setString(1, name);
                ps.setString(2, lastName);
                ps.setInt(3, identification);
                ps.setString(4, phoneNumber);
                ps.setDate(5, new java.sql.Date(birthDate.getTime()));
                ps.setString(6, email);
                ps.setBytes(7, photoData);
                ps.setInt(8, id);
                ps.executeUpdate();

                loadTable();
                labelStatus.setText("Registro modificado correctamente");
                labelStatus.setVisible(true);
                clear();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.toString());

        } catch (NullPointerException e) {
            labelDateError.setVisible(true);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Ingresa una cédula valida");
        }


    }//GEN-LAST:event_createModifybtnActionPerformed

    private void codeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeTextActionPerformed

    private void emailEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailEntryActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int id = Integer.parseInt(codeText.getText());

        try {
            PreparedStatement ps = con.prepareStatement("DELETE FROM registros WHERE id=?");
            ps.setInt(1, id);
            ps.executeUpdate();
            labelStatus.setVisible(true);
            labelStatus.setText("Registro eliminado correctamente");
            loadTable();
            labelStatus.setVisible(true); // Hacer visible el JLabel
            labelStatus.setText("Registro eliminado correctamente");
            deleteBtn.setEnabled(false);

            clear();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void firstNameEntryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameEntryFocusGained
        if (firstNameEntry.getText().equals("Introduce tu nombre")) {
            firstNameEntry.setText("");
            firstNameEntry.setForeground(black);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");
            idEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);

        }
    }//GEN-LAST:event_firstNameEntryFocusGained

    private void lastNameEntryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameEntryFocusGained
        if (lastNameEntry.getText().equals("Introduce tu apellido")) {
            lastNameEntry.setText("");
            lastNameEntry.setForeground(black);
        }
        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");
            idEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);
        }
    }//GEN-LAST:event_lastNameEntryFocusGained

    private void idEntryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idEntryFocusGained
        if (idEntry.getText().equals("Introduce tu cédula")) {
            idEntry.setText("");
            idEntry.setForeground(black);
        }
        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);
        }
    }//GEN-LAST:event_idEntryFocusGained

    private void phoneEntryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneEntryFocusGained
        if (phoneEntry.getText().equals("Introduce tu número telefónico")) {
            phoneEntry.setText("");
            phoneEntry.setForeground(black);
        }
        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");
            idEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);
        }
    }//GEN-LAST:event_phoneEntryFocusGained

    private void emailEntryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailEntryFocusGained
        if (emailEntry.getText().equals("Introduce tu correo electronico")) {
            emailEntry.setText("");
            emailEntry.setForeground(black);
        }
        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");
            idEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
    }//GEN-LAST:event_emailEntryFocusGained

    private void selectFileBtnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectFileBtnFocusGained
        labelStatus.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_selectFileBtnFocusGained

    private void createModifybtnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_createModifybtnFocusGained
        labelStatus.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_createModifybtnFocusGained

    private void deleteBtnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteBtnFocusGained
        this.requestFocusInWindow();
        clrFocus();
    }//GEN-LAST:event_deleteBtnFocusGained

    private void clearBtnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clearBtnFocusGained
        labelStatus.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_clearBtnFocusGained

    private void tableRegFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableRegFocusGained
        labelStatus.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_tableRegFocusGained

    private void tableRegMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRegMouseClicked
        photo = null;
        PreparedStatement ps;
        ResultSet rs;
        deleteBtn.setEnabled(true);
        createModifybtn.setText("Modificar");
        try {
            int fila = tableReg.getSelectedRow();

            if (fila >= 0) {
            }
            int id = Integer.parseInt(tableReg.getValueAt(fila, 0).toString());

            ps = con.prepareStatement("SELECT name,last_name,identification,phone_number,birth_day,email,photo FROM registros WHERE  id =?");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            while (rs.next()) {
                codeText.setText(String.valueOf(id));

                firstNameEntry.setText(rs.getString("name"));
                firstNameEntry.setForeground(black);

                lastNameEntry.setText(rs.getString("last_name"));
                lastNameEntry.setForeground(black);

                idEntry.setText(rs.getString("identification"));
                idEntry.setForeground(black);

                phoneEntry.setText(rs.getString("phone_number"));
                phoneEntry.setForeground(black);

                birthDateChooser.setDate(rs.getDate("birth_day"));

                emailEntry.setText(rs.getString("email"));
                emailEntry.setForeground(black);

                blob = rs.getBlob("photo");
                System.out.println(blob);
                InputStream inputStream = blob.getBinaryStream();
                Image image = ImageIO.read(inputStream);
                ImageIcon imgIcon = new ImageIcon(image.getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), image.SCALE_SMOOTH));
                ImageIcon icon = new ImageIcon(image);
                imgLabel.setIcon(imgIcon);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_tableRegMouseClicked

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clear();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void phoneEntryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneEntryKeyTyped
        if (phoneEntry.getText().length() >= 12) { // Permitir hasta 12 caracteres (11 dígitos y un guión)
            evt.consume();
        }
        char key = evt.getKeyChar();
        boolean isNumeric = Character.isDigit(key); // Verificar si la tecla presionada es un número
        boolean isBackspace = key == '\b'; // Verificar si la tecla presionada es la tecla de borrar
        boolean isCtrlDown = evt.isControlDown(); // Verificar si la tecla `Ctrl` está presionada
        if (!isNumeric && !isBackspace && !isCtrlDown) { // Verificar si la tecla presionada no es un número ni la tecla de borrar y que la tecla `Ctrl` no está presionada
            phoneLabelError.setVisible(true);
            evt.consume(); // Consumir el evento para que no se agregue al campo de entrada
        } else {
            phoneLabelError.setVisible(false);
            String phoneText = phoneEntry.getText();
            if (phoneText.length() == 5 && phoneText.charAt(4) == '-') { // Verificar si se ha ingresado el quinto dígito y si el quinto caracter es un guión
                if (isBackspace) { // Verificar si la tecla presionada es la tecla de borrar
                    phoneText = phoneText.substring(0, 4); // Eliminar el guión y el dígito que quedan juntos
                    phoneEntry.setText(phoneText);
                }
            } else if (phoneText.length() == 4 && isNumeric) { // Verificar si se han ingresado los primeros cuatro dígitos y si la tecla presionada es un número
                phoneText = phoneText + "-"; // Agregar un guión después de los primeros cuatro dígitos
                phoneEntry.setText(phoneText);
            } else if (phoneText.length() == 5 && isBackspace) { // Verificar si se ha ingresado el guión y un dígito y si la tecla presionada es la tecla de borrar
                phoneText = phoneText.substring(0, 4); // Eliminar el guión
                phoneEntry.setText(phoneText);
            } else if (phoneText.length() == 1 && phoneText.charAt(0) == '-') { // Verificar si solo queda el guión en el campo de entrada de texto
                phoneEntry.setText(""); // Dejar el campo de entrada de texto vacío
            }
        }
    }//GEN-LAST:event_phoneEntryKeyTyped

    private void idEntryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idEntryKeyTyped
        if (idEntry.getText().length() >= 8) {
            evt.consume();
        }
        char key = evt.getKeyChar();
        boolean isNumeric = Character.isDigit(key);
        boolean isBackspace = key == '\b'; // Verificar si la tecla presionada es la tecla de borrar
        boolean isCtrlDown = evt.isControlDown(); // Verificar si la tecla Ctrl estápresionada
        boolean isNonNumericChar = !isNumeric && !isBackspace && !isCtrlDown; // Agregar una verificación adicional para evitar que el JLabel se active cuando se presiona Ctrl + otra tecla
        if (isNonNumericChar) { // Verificar si el carácter presionado es no numérico y el campo de entrada solo contiene guiones
            idLabelError.setVisible(true);
            evt.consume();
        } else {
            idLabelError.setVisible(false);
        }
        if (phoneEntry.getText().isEmpty()) {
            idLabelError.setVisible(false);
        }
    }//GEN-LAST:event_idEntryKeyTyped

    private void firstNameEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameEntryActionPerformed

    private void phoneEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneEntryActionPerformed

    private void idEntryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idEntryFocusLost
        idLabelError.setVisible(false);
    }//GEN-LAST:event_idEntryFocusLost

    private void phoneEntryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneEntryFocusLost
        phoneLabelError.setVisible(false);
    }//GEN-LAST:event_phoneEntryFocusLost

    private void firstNameEntryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstNameEntryKeyTyped
        char key = evt.getKeyChar();
        boolean isLetter = Character.isLetter(key);
        boolean isSpace = key == ' ';
        boolean isBackspace = key == '\b'; // Verificar si la tecla presionada es la tecla de borrar
        boolean isCtrlDown = evt.isControlDown(); // Verificar si la tecla Ctrl está presionada
        if (!isLetter && !isSpace && !isBackspace && !isCtrlDown) { // Agregar una verificación adicional para evitar que el JLabel se active cuando se presiona Ctrl + otra tecla
            firstNameLabelError.setVisible(true);
            evt.consume();
        } else {
            firstNameLabelError.setVisible(false);
        }
        if (firstNameEntry.getText().isEmpty()) {
            //firstNameLabelError.setVisible(false);
        }
    }//GEN-LAST:event_firstNameEntryKeyTyped

    private void firstNameEntryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameEntryFocusLost
        firstNameLabelError.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_firstNameEntryFocusLost

    private void lastNameEntryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lastNameEntryKeyTyped
        char key = evt.getKeyChar();
        boolean isLetter = Character.isLetter(key);
        boolean isSpace = key == ' ';
        boolean isBackspace = key == '\b'; // Verificar si la tecla presionada es la tecla de borrar
        boolean isCtrlDown = evt.isControlDown(); // Verificar si la tecla Ctrl está presionada
        if (!isLetter && !isSpace && !isBackspace && !isCtrlDown) { // Agregar una verificación adicional para evitar que el JLabel se active cuando se presiona Ctrl + otra tecla
            lastNameLabelError.setVisible(true);
            evt.consume();
        } else {
            lastNameLabelError.setVisible(false);
        }
        if (lastNameEntry.getText().isEmpty()) {
            //lastNameLabelError.setVisible(false);
        }
    }//GEN-LAST:event_lastNameEntryKeyTyped

    private void lastNameEntryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameEntryFocusLost
        lastNameLabelError.setVisible(false);
        clrFocus();
    }//GEN-LAST:event_lastNameEntryFocusLost

    private void emailEntryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailEntryKeyTyped
        String emailRegex = "^[a-zA-Z0-9.%+-]\\@[a-zA-Z0-9-]\\.[a-zA-Z0-9._-]$";
        String email = emailEntry.getText();

        // Verificar si el texto ingresado en el campo de correo electrónico coincide con el formato esperado
        boolean isValidEmail = Pattern.matches(emailRegex, email);

        // Si el correo electrónico no es válido, mostrar un mensaje de error
        if (!isValidEmail) {
            // Mostrar un mensaje de error al usuario
            emailCheckerLabel.setVisible(true);
            emailCheckerLabel.setForeground(new java.awt.Color(204, 51, 0));
            emailCheckerLabel.setText("Dirección de correo no válida");

        } else {
            emailCheckerLabel.setVisible(true);
            //[5,157,6]//
            emailCheckerLabel.setForeground(new java.awt.Color(5, 157, 6));
            emailCheckerLabel.setText("Dirección de correo válida");
        }
    }//GEN-LAST:event_emailEntryKeyTyped

    private void emailEntryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailEntryFocusLost
        emailCheckerLabel.setVisible(false);
        emailCheckerLabel.setForeground(new java.awt.Color(204, 51, 0));
        emailCheckerLabel.setText("Dirección de correo no válida");
        clrFocus();
    }//GEN-LAST:event_emailEntryFocusLost

    private void birthDateChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_birthDateChooserMouseClicked
        labelDateError.setVisible(false);
    }//GEN-LAST:event_birthDateChooserMouseClicked

    private void loadTable() {
        DefaultTableModel modelTable = (DefaultTableModel) tableReg.getModel();
        clrFocus();
        modelTable.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        int[] anchos = {10, 25, 25, 8};
        for (int i = 0; i < tableReg.getColumnCount(); i++) {
            tableReg.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);

        }
        try {
            ps = con.prepareStatement("SELECT id,name,last_name,identification FROM registros");
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();
            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int i = 0; i < columnas; i++) {
                    fila[i] = rs.getObject(i + 1);

                }

                modelTable.addRow(fila);
                render();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void clrFocus() {

        // 
        if (firstNameEntry.getText().isEmpty()) {
            firstNameEntry.setText("Introduce tu nombre");
            firstNameEntry.setForeground(gray);
        }
        if (lastNameEntry.getText().isEmpty()) {
            lastNameEntry.setText("Introduce tu apellido");
            lastNameEntry.setForeground(gray);
        }
        if (idEntry.getText().isEmpty()) {
            idEntry.setText("Introduce tu cédula");

            idEntry.setForeground(gray);
        }
        if (phoneEntry.getText().isEmpty()) {
            phoneEntry.setText("Introduce tu número telefónico");
            phoneEntry.setForeground(gray);
        }
        if (emailEntry.getText().isEmpty()) {
            emailEntry.setText("Introduce tu correo electronico");
            emailEntry.setForeground(gray);
        }

    }

    private void clear() {
        codeText.setText("");
        createModifybtn.setText("Crear");
        labelDateError.setVisible(false);
        firstNameEntry.setText("Introduce tu nombre");
        firstNameEntry.setForeground(gray);
        lastNameEntry.setText("Introduce tu apellido");
        lastNameEntry.setForeground(gray);
        idEntry.setText("Introduce tu cédula");
        idEntry.setForeground(gray);
        phoneEntry.setText("Introduce tu número telefónico");
        phoneEntry.setForeground(gray);
        birthDateChooser.setCalendar(null);
        emailEntry.setText("Introduce tu correo electronico");
        phoneLabelError.setVisible(false);
        emailCheckerLabel.setText("Dirección de correo no valida");
        emailCheckerLabel.setForeground(new java.awt.Color(204, 51, 0));
        emailEntry.setForeground(gray);
        imgLabel.setIcon(null);
        blob = null;
        photo = null;
        deleteBtn.setEnabled(false);
    }

    private void render() {
        DefaultTableCellRenderer centro = new DefaultTableCellRenderer();
        centro.setHorizontalAlignment(JLabel.CENTER);
        JTableHeader tableHeader = tableReg.getTableHeader();
        ((DefaultTableCellRenderer) tableHeader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        tableHeader.setFont(new Font("Segoe UI", Font.BOLD, 12));
        tableReg.getColumnModel().getColumn(0).setCellRenderer(centro);
        tableReg.getColumnModel().getColumn(3).setCellRenderer(centro);
    }

    private String getFileExtension(File file) {
        String fileName = file.getName();
        int dotIndex = fileName.lastIndexOf(".");
        return (dotIndex == -1) ? "" : fileName.substring(dotIndex + 1);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Eval4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Eval4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Eval4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Eval4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Eval4().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Eval4.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private com.toedter.calendar.JDateChooser birthDateChooser;
    private javax.swing.JLabel birthDateLabel;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField codeText;
    private javax.swing.JButton createModifybtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel emailCheckerLabel;
    private javax.swing.JTextField emailEntry;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JSeparator emailSeparator;
    private javax.swing.JTextField firstNameEntry;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel firstNameLabelError;
    private javax.swing.JSeparator firstNameSeparator;
    private javax.swing.JTextField idEntry;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel idLabelError;
    private javax.swing.JSeparator idSeparator;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel labelDateError;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JTextField lastNameEntry;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel lastNameLabelError;
    private javax.swing.JSeparator lastNameSeparator;
    private javax.swing.JLabel lbImg;
    private javax.swing.JPanel panelForm;
    private javax.swing.JTextField phoneEntry;
    private javax.swing.JLabel phoneLabelError;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JSeparator phoneSeparator;
    private javax.swing.JScrollPane scrollPaneReg;
    private javax.swing.JButton selectFileBtn;
    javax.swing.JTable tableReg;
    // End of variables declaration//GEN-END:variables

}
